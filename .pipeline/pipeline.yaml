---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: secure-kube-pipeline
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: apikey
      description: the ibmcloud api key
    - name: path-to-dockerfile
      default: '.'
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    - name: image-name
      description: image name
    - name: cluster-name
      description: the name of the cluster to target
    - name: dev-cluster-namespace
      description: the namespace
    - name: pipeline-debug
      default: "0"
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "toolchain-apikey"
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: docker-lint
      runAfter: [git-clone]
      taskRef:
        name: docker-check-task
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: unit-tests
      runAfter: [docker-lint]
      taskRef:
        name: unit-tests-task
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: containerize
      runAfter: [unit-tests]
      taskRef:
        name: icr-cr-build
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: registry-region
          value: $(params.registry-region)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: image-name
          value: $(params.image-name)
        - name: path-to-context
          value: $(params.path-to-dockerfile)
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        # - name: additional-tags
        #  value: 'latest'
        - name: additional-tags-script
          value: |
            # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
            # e.g. 3-master-50da6912-20181123114435
            # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
            GIT_BRANCH="$(tasks.git-clone.results.git-branch)"
            GIT_COMMIT="$(tasks.git-clone.results.git-commit)"
            TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 ) 
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}          
            echo "$IMAGE_TAG"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: vulnerability-advisor
      taskRef:
        name: icr-check-va-scan
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: scan-report-file
          value: 'app-image-va-report.json'
        # - name: max-iteration
        #   value: '5'
        # - name: sleep-time
        #   value: '3'
        # - name: fail-on-scanned-issues
        #   value: 'false'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: image-url
          value: $(tasks.containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.containerize.results.image-digest)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: fetch-cluster-config
      runAfter: [unit-tests]
      taskRef:
        name: iks-fetch-config
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: kubernetes-service-apikey-secret-key
          value: "apikey"
        - name: cluster-name
          value: $(params.cluster-name)
      workspaces:
        - name: cluster-configuration
          workspace: pipeline-ws
    - name: deploy-dev
      taskRef:
        name: kube-deploy
      runAfter: [vulnerability-advisor]
      params:
        - name: repository
          value: $(params.repository)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: cluster-namespace
          value: $(params.dev-cluster-namespace)
        - name: cluster-region
          value: $(params.registry-region)
        - name: allow-create-route
          value: "true"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: ibmcloud-api-key
          value: $(params.apikey)
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: publish-deployable-task
      runAfter: [fetch-cluster-config, deploy-dev]
      taskRef:
        name: toolchain-publish-deployable-mapping
      params:
        - name: deployable-type
          value: "kubernetes_cluster"
        - name: deployable-region-id
          value: $(tasks.fetch-cluster-config.results.region)
        - name: deployable-guid
          value: $(tasks.fetch-cluster-config.results.cluster-id)
        - name: deployable-rg-id
          value: $(tasks.fetch-cluster-config.results.resource-group-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
